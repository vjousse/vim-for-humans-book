***********************
Rendre |vim| utilisable
***********************

√áa peut para√Ætre √©tonnant comme approche, mais c'est pour moi la premi√®re chose √† faire : rendre |vim| utilisable par un humain lambda. Si tout le monde semble s'accorder sur le fait que |vim| est un **√©diteur tr√®s puissant**, tout le monde pourra aussi s'accorder sur le fait que de base, il est totalement **imbitable**. Soyons honn√™te, sans une configuration par d√©faut minimale, utiliser |vim| est **contre-productif**. 

C'est √† mon avis le premier obstacle √† surmonter avant toute autre chose. C'est ce que les autres √©diteurs ¬´¬†√† la mode¬†¬ª comme VSCode, TextMate, Sublime Text, Notepad++ ou NetBeans proposent, c'est √† dire un environnement √† minima utilisable tel quel, m√™me si l'on n'en exploite pas la totalit√©.

Voici donc ce qui manque √† un |vim| nu (et ce qui est, de mon point de vue, une **cause d'abandon pour beaucoup** d'entre vous) :


**Configuration par d√©faut** 
    |vim| est configurable gr√¢ce √† un fichier nomm√© |vimrc|, qui est bien entendu vide par d√©faut. La premi√®re √©tape va √™tre d'√©crire ou de se procurer un fichier |vimrc| avec une configuration minimale.


**Coloration syntaxique**
    De base, |vim| est tout blanc et tout moche. On va utiliser le th√®me *Solarized* (http://ethanschoonover.com/solarized). Si votre but est d'√™tre efficace, c'est le meilleur th√®me disponible actuellement (tout √©diteur de texte confondu). La belle image qui suit vous donne une id√©e des deux looks disponibles (clair ou sombre). Pour ma part j'utilise le th√®me sombre.

    |solarized|

.. |solarized| image:: ../../book-tex/graphics/solarized-vim.png

**Explorateur de fichiers**
    Si vous utilisez |vim| avec une interface graphique (ce qui est le cas de 99% d'entre vous je suppose) vous avez par d√©faut un menu ``Fichier`` vous permettant d'ouvrir un fichier. C'est certes un bon d√©but, mais avoir √† disposition un explorateur de projet √† la NetBeans ou √† la TextMate peut s'av√©rer tr√®s pratique. Pour obtenir le m√™me comportement, nous utiliserons *NERD tree* (https://github.com/preservim/nerdtree). √Ä savoir qu'√† la fin de ce guide, vous n'aurez plus besoin de la souris (et donc des menus et autres boutons).


Ce chapitre est indispensable si vous n'avez que peu d'exp√©rience (voire pas du tout) avec |vim|. √Ä la fin de ce chapitre, vous aurez un |vim| dont vous pourrez commencer √† vous servir pour vos t√¢ches de tous les jours. Cela devrait √™tre suffisant pour vous permettre d'apprendre le reste petit √† petit. Car il n'y a pas de secret, il vous faudra pratiquer pour apprendre |vim|. Autant commencer de suite et le moins douloureusement possible.

En revanche, si vous √™tes d√©j√† familier avec |vim| et n'utilisez d√©j√† plus la souris, vous pouvez sagement sauter ce chapitre (soyez s√ªr tout de m√™me de donner sa chance au th√®me *Solarized*).

.. _modeinsertion:

Pr√©ambule indispensable : le mode insertion
===========================================

Prenons le pari de cr√©er le fichier |vimrc| avec |vim| lui-m√™me. Comme je vous le disais, lus t√¥t vous commencerez, mieux ce sera.
Vous devrez certainement commencer par installer une version de |vim|. Si vous utilisez un Mac, essayez MacVim (https://macvim.org/) sans aucune h√©sitation. Si vous utilisez GNU/Linux ou tout autre syst√®me ¬´¬†Unix¬†¬ª vous devriez s√ªrement avoir la commande *vim* √† disposition dans votre terminal. Vous pouvez aussi utiliser l'interface graphique *gVim* qui devrait √™tre facilement installable gr√¢ce √† votre gestionnaire de logiciels, pour Ubuntu le paquet correspondant est `vim-gnome`. Faites attention √† bien installer la version **compl√®te** de vim, notamment avec le support de Ruby et de Lua dont nous aurons besoin par la suite. Pour Ubuntu, le paquet sembler s'appeller `vim`. Pour Mac OS X, la question ne se pose pas, MacVim inclut d√©j√† tout ce qu'il faut. Pour Windows, il semblerait y avoir une version disponible sur le site officiel de |vim| (http://www.vim.org/download.php), mais je ne l'ai pas test√©e.

**Pour ma part**, j'utilise *vim* directement en ligne de commande, sous Archlinux, dans un terminal `kitty <https://sw.kovidgoyal.net/kitty/>`_ avec la police Nerd Fonts `FiraCode Nerd Font <https://www.nerdfonts.com/font-downloads>`_. C'est avec cette configuration que les capture d'√©cran de ce livre sont r√©alis√©es.

Au lancement de |vim|, vous devriez avoir un texte d'accueil vous encourageant √† aider les pauvres enfants en Ouganda. Ce texte disparaitra d√®s que nous allons saisir des caract√®res dans |vim|. Nous allons commencer par entrer un commentaire dans l'en-t√™te du fichier pour y mentionner notre nom. Pour pouvoir entrer du texte appuyez sur |tti|. Vous devriez avoir `une page`_ qui ressemble plus ou moins √† la figure ci-dessous, notez bien le ``--INSERT--`` en bas √† gauche qui nous indique que nous sommes en mode insertion (le mode o√π nous pouvons saisir du texte). Pour information, le th√®me de mon terminal est un th√®me sombre, il est donc possible que pour l'instant, les couleurs de votre |vim| soient diff√©rentes.

√Ä l'√©criture de ces lignes, la version de |vim| que j'utilise est la ``9.1.380``.


.. _une page:

.. image:: ../../book-tex/graphics/vim-new.png

**√Ä noter** : si vous ne savez pas trop ce que vous avez fait et que |vim| vous affiche des trucs en rouge en bas √† gauche ou ne semble pas r√©agir comme il faut quand vous appuyez sur |tti|, appuyez plusieurs fois sur |ttesc|, cela devrait vous remettre au mode par d√©faut de |vim|, le mode *Normal*.

Vous devriez maintenant pouvoir entrer `le commentaire ci-dessous`_ (je vous laisse √©videmment changer mon nom par le votre ü§ì).

.. _le commentaire ci-dessous:

.. code-block:: vim

  " VIM Configuration - Vincent Jousse

Vous aurez remarqu√© que les commentaires en *VimL* (le langage de configuration de |vim|) commencent par un `"`. Appuyez ensuite sur |ttesc| pour revenir au mode par d√©faut (le mode normal) de |vim|. Et voil√† le travail, comme vous pouvez le voir sur `la copie d'√©cran de Vim avec votre joli commentaire`_.

.. _la copie d'√©cran de Vim avec votre joli commentaire:

.. image:: ../../book-tex/graphics/vim-first-comment.png

Tout √ßa pour √ßa me direz-vous, et vous avez bien raison. Et encore, on n'a m√™me pas encore vu comment le sauvegarder. Mais tout cela a une logique que je vais vous expliquer. L'avantage de |vim| est qu'il est g√©n√©ralement logique. Quand vous avez compris la logique, tout vous semble limpide et tomber sous le sens.


Par d√©faut, |vim| est lanc√© dans un mode que l'on appelle le mode *Normal*. C'est √† dire que ce mode n'est pas fait pour √©crire du texte (√ßa, √ßa sera le mode *Insertion*) mais juste pour se d√©placer et manipuler du texte. C'est la pr√©sence de ces deux diff√©rents modes (il y en a d'autres mais ce n'est pas le sujet pour l'instant) qui fait toute la puissance de |vim|. Il vous faudra un certain temps pour vous rendre compte de cette puissance par vous-m√™me, alors faites-moi juste confiance pour l'instant.

Si vous vous demandez pourquoi ces modes, pourquoi on semble se compliquer la vie (on se la simplifie en fait) et en quel honneur, dans le mode par d√©faut, il n'est m√™me pas possible d'ins√©rer du texte, lisez attentivement la section qui suit.

.. _modes:

Les modes : d'o√π |vim| tire sa puissance
========================================

Je pense que nous serons tous √† peu pr√™t d'accord sur le fait que si vous souhaitez apprendre √† utiliser |vim|, c'est pour gagner en efficacit√© pour la saisie/manipulation de texte/code. Pour gagner en efficacit√© lorsque l'on tape du code il n'y a pas 36 solutions. Il n'y en a qu'une en fait : il faut bouger le moins possible les mains (voire pas du tout), et ne bouger que les doigts.

Pour ce faire bien s√ªr, vous oubliez tout d'abord l'utilisation de la souris. En plus d'√™tre lent, le mouvement clavier -> souris puis souris -> clavier est tr√®s mauvais pour vos articulations. Il est souvent √† l'origine de troubles musculosquelettiques. Vous √™tes peut-√™tre jeune et n'avez pas encore eu ce type de soucis. Mais croyez moi, √ßa vient beaucoup plus vite qu'on ne le croit. Si vous passez votre journ√©e sur un ordinateur, ne n√©gligez pas ces facteurs, vous le regretterez un jour. D'apr√®s *Wikipedia*, c'est le type de maladie professionnelle la plus courante √† l'heure actuelle (https://fr.wikipedia.org/wiki/Troubles_musculosquelettiques).

Vous oubliez aussi le mouvement de votre main droite vers les touches directionnelles gauche/droite/bas/haut. C'est une perte de temps et c'est totalement inutile avec |vim|.

Qu'est-ce que vous avez le droit de faire dans tout √ßa ? Pas grand chose, si ce n'est garder vos mains sur la position de repos comme le montre `l'image ci-dessous avec la position id√©ale des mains`_. 

.. _l'image ci-dessous avec la position id√©ale des mains:

.. figure:: ../../book-tex/graphics/hand-position.png
   
   Position de repos, clavier QWERTY.

   *Illustration par Cy21 - CC-BY-SA-3.0 (http://www.creativecommons.org/licenses/by-sa/3.0*) ou GFDL (http://www.gnu.org/copyleft/fdl.html, via Wikimedia Commons http://commons.wikimedia.org/wiki/File:Typing-home-keys-hand-position.svg

Vous trouverez d'ailleurs sur la plupart des claviers des marques sur les touches F et J, c'est pour vous donner un rep√®re tactile de la position o√π doivent se trouver vos index dans la position de repos.

Ce parti pris (bouger le moins possible les mains du clavier) justifie √† lui seul la pr√©sence d'un mode *normal* et d'un mode *insertion* dans |vim|. En passant de l'un √† l'autre, les touches sous vos doigts serviront tant√¥t √† vous d√©placer et √† r√©aliser des op√©rations sur le texte : copier/coller, macros, ‚Ä¶ (c'est le mode *normal*), tant√¥t √† s√©lectionner (c'est le mode *visuel*) et tant√¥t √† ins√©rer du texte (c'est le mode *insertion*). Tout cela bien s√ªr en √©vitant l'utilisation de combinaisons de touches du style *Ctrl + touche* qui ne sont g√©n√©ralement pas bonnes pour vos doigts (*Emacs* si tu nous lis, je te salue).

Par d√©faut, on passe du mode *insertion* au mode *normal* en appuyant sur la |ttesc|, mais c'est une des premi√®res choses que l'on changera : |ttesc| est bien trop loin sur les claviers actuels. 

Pour passer du mode *normal* au mode *insertion*, on peut par exemple appuyer sur |tti|. On apprendra par la suite qu'il existe d'autres moyens de faire. Par exemple pour rentrer en mode insertion tout en cr√©ant une nouvelle ligne en dessous de la ligne courante (peu importe o√π se trouve votre curseur sur la ligne), on utilisera |tto| en mode *normal*.

J'y reviendrai plus tard dans ¬´¬†:ref:`se-deplacer` ¬ª mais si vous n'√™tes pas pr√™t, √† terme, √† ne plus utiliser votre souris et les fl√®ches directionnelles pour √©diter du texte, je vous recommanderais presque d'arr√™ter votre apprentissage maintenant. C'est aussi simple que cela. |vim| r√©v√®le tout sa puissance quand il est utilis√© sans souris et en bougeant le moins possible les mains.

Si vous voulez pousser la d√©marche encore plus loin, vous pouvez aussi vous procurer un clavier orthogonal *TypeMatrix* (http://www.typematrix.com/). C'est ce que j'utilise personnellement, et mes doigts m'en remercient tous les jours.

L'ultime changement serait d'utiliser une disposition de clavier encore plus efficace comme le *b√©po* pour quasi doubler sa vitesse de frappe au clavier. Pour les plus curieux d'entre vous, j'explique la d√©marche sur mon blog : https://vincent.jousse.org/blog/fr/comment-doubler-sa-vitesse-de-frappe-au-clavier/


La configuration par d√©faut : indispensable
===========================================

Passons aux choses s√©rieuses, c'est-√†-dire comment rendre |vim| un tant soit peu utilisable. Nous allons donc √©diter le fichier de configuration par d√©faut |vimrc| en y pla√ßant des valeurs que toute personne normalement constitu√©e souhaiterait y voir figurer.

Ce fichier doit se trouver dans votre r√©pertoire d'accueil. */home/votre_user/.vimrc* sous Linux, */Users/votre_user/.vimrc* sous Mac OS X ou plus g√©n√©ralement *~/.vimrc*. Sous Windows vous pouvez cr√©er un fichier nomm√© *_vimrc* qui doit se situer dans votre r√©pertoire *%HOME%* qui change en fonction de votre version de Windows. C'est g√©n√©ralement le r√©pertoire jute "au-dessus" de votre r√©pertoire *Mes Documents*. Plus d'infos sur Wikipedia http://en.wikipedia.org/wiki/Home_directory#Default_Home_Directory_per_Operating_System.

J'ai comment√© chacune des lignes du fichier directement dans le code. Rien de sorcier ici, on se demande juste pourquoi tout cela n'est pas inclus par d√©faut.

.. code-block:: vim

    " VIM Configuration - Vincent Jousse
    " Annule la compatibilite avec l'ancetre Vi : totalement indispensable
    set nocompatible

    " -- Affichage
    set title                 " Met a jour le titre de votre fenetre ou de
                              " votre terminal
    set number                " Affiche le numero des lignes
    set ruler                 " Affiche la position actuelle du curseur
    set wrap                  " Affiche les lignes trop longues sur plusieurs
                              " lignes

    set scrolloff=3           " Affiche un minimum de 3 lignes autour du curseur
                              " (pour le scroll)

    " -- Recherche
    set ignorecase            " Ignore la casse lors d'une recherche
    set smartcase             " Si une recherche contient une majuscule,
                              " re-active la sensibilite a la casse
    set incsearch             " Surligne les resultats de recherche pendant la
                              " saisie
    set hlsearch              " Surligne les resultats de recherche

    " -- Beep
    set visualbell            " Empeche Vim de beeper
    set noerrorbells          " Empeche Vim de beeper

    " Active le comportement 'habituel' de la touche retour en arriere
    set backspace=indent,eol,start

    " Cache les fichiers lors de l'ouverture d'autres fichiers
    set hidden


Pour ceux qui ont fait un copier/coller, il ne vous reste plus qu'√† sauvegarder votre fichier nouvellement cr√©√©. Nous voulons le placer √† la racine de votre compte utilisateur, c'est √† dire l'enregistrer sous `~/.vimrc`. Sous Mac OS X et Linux, ``~`` d√©signe le r√©pertoire d'accueil de l'utilisateur courant. Attention, les fichiers commen√ßant par un ``.`` sont des fichiers cach√©s sous Linux et Mac OS X, ne vous √©tonnez donc pas de ne pas le voir par d√©faut dans votre navigateur de fichiers.

Pour le sauvegarder avec |vim|, il vous suffira, apr√®s avoir appuy√© sur |ttesc| pour repasser en mode *Normal*, de taper ``:w ~/.vimrc``. Pour sauvegarder vos prochaines modifications tapez en mode *Normal* ``:w``. Pour sauvegarder et quitter ``:wq ~/.vimrc``. Pour quitter ``:q`` et pour quitter sans sauvegarder (forcer √† quitter) ``:q!``.

J'ai mis en ligne ce fichier de configuration directement sur *Github*. Vous pouvez le t√©l√©charger ou le copier directement √† partir d'ici : http://vimebook.com/link/v2/fr/firstconfig.

Voici √† quoi devrait ressembler |vim| `apr√®s votre premi√®re configuration`_.


.. _apr√®s votre premi√®re configuration:

.. figure:: ../../book-tex/graphics/vim-first-config.png

   |vim| apr√®s votre premi√®re configuration.

Notez l'ajout des num√©ros de ligne sur la gauche.

Bon c'est bien beau tout √ßa mais √ßa manque un peu de couleurs. Au suivant !

Que la couleur soit !
=====================

Tout d'abord il faut commencer par activer la coloration syntaxique du code dans le fichier de configuration. Ajoutez ces lignes √† l√† fin de votre fichier de configuration |vimrc|.

.. code-block:: vim

    " Active la coloration syntaxique
    syntax enable
    " Active les comportements specifiques aux types de fichiers comme
    " la syntaxe et l'indentation
    filetype on
    filetype plugin on
    filetype indent on

Vous devriez avoir un |vim| qui ressemble √† celui de la figure ci-dessous. 


.. figure:: ../../book-tex/graphics/vim-syntax-hl.png

   Coloration syntaxique par d√©faut.

Pour l'instant, le plus facile pour que les modifications apport√©es √† votre |vimrc| soient prises en compte, c'est de le fermer et de le r√©-ouvrir. Si vous voulez vraiment vous la jouer √† la |vim| de suite, en mode normal tapez ``:so ~/.vimrc`` ou ``:so $MYVIMRC``.

``:so`` √©tant un raccourci pour ``:source``. C'est une bonne premi√®re √©tape, passons maintenant √† l'utilisation d'un th√®me.

Les th√®mes vont vous permettre de rendre votre |vim| un peu moins aust√®re en changeant g√©n√©ralement la couleur de fond ainsi que les couleurs par d√©faut pour le code. Comme je l'ai mentionn√© plus haut, nous allons utiliser le th√®me *Solarized* [#solarized]_ http://ethanschoonover.com/solarized (avec fond clair ou fonc√©, √ßa d√©pendra de vous). 

.. [#solarized] √Ä noter que nous utiliserons une version modernis√©e de *Solarized* pour vim et non l'originale disponible sur le site de l'auteur. Cette version plus r√©cente va notamment lui permettre de fonctionner correctement sur les terminaux modernes. On l'installera √† partir de ce fork https://github.com/ericbn/vim-solarized.

https://raw.githubusercontent.com/ericbn/vim-solarized/master/colors/solarized.vim


Pour l'installer, commencez tout d'abord par cr√©er un r√©pertoire nomm√© `.vim` au m√™me endroit que votre |vimrc| (dans votre r√©pertoire utilisateur donc). √Ä noter que ce r√©pertoire s'appelle `vimfiles` sous Windows. √Ä chaque fois que je ferai r√©f√©rence au r√©pertoire `.vim` √ßa sera en fait `vimfiles` pour les Windowsiens. Dans ce r√©pertoire `.vim`, cr√©ez un sous-r√©pertoire nomm√© `colors`. T√©l√©chargez ensuite le fichier du th√®me *Solarized* https://raw.githubusercontent.com/ericbn/vim-solarized/master/colors/solarized.vim (c'est le m√™me fichier pour les deux versions du th√®me) et copiez le dans le r√©pertoire `vim/colors/` fra√Æchement cr√©√©.


Sous Linux vous pouvez faire tout √ßa via les commandes suivantes¬†:

.. code-block:: bash

    mkdir -p ~/.vim/colors
    wget -P ~/.vim/colors https://raw.githubusercontent.com/ericbn/vim-solarized/master/colors/solarized.vim

Votre r√©pertoire `.vim` devrait ressembler √† cela¬†:

.. code-block:: bash

    .vim
    ‚îî‚îÄ‚îÄ colors
        ‚îî‚îÄ‚îÄ solarized.vim


Activez ensuite le th√®me Solarized dans votre |vimrc| comme le montre le code ci-dessous.::

    " Utilise la version sombre de Solarized
    set background=dark
    " Active les couleurs 24-bits dans le terminal
    set termguicolors
    colorscheme solarized

Pour tester le th√®me clair, remplacez `dark` par `light` (au niveau de la d√©finition de la propri√©t√© `background`).

Ci-dessous un aper√ßu des deux variantes (ma pr√©f√©rence allant √† la variante sombre soit dit en re-passant).

.. figure:: ../../book-tex/graphics/vim-solarized-dark.png

   Le th√®me *Solarized* sombre.


.. figure:: ../../book-tex/graphics/vim-solarized-light.png

   Le th√®me *Solarized* clair.


Un bonus (si vous n'utilisez pas |vim| directement dans votre terminal) serait de choisir une police de caract√®res qui vous convient un peu mieux. C'est bien s√ªr facultatif, mais je pr√©sume que certains d'entre vous sont des esth√®tes aguerris.

Si vous √™tes sous Mac OS X je vous conseille la police `Monaco` qui est assez conviviale. Rajoutez les lignes suivantes √† votre |vimrc| pour l'utiliser¬†: ::

    set guifont=Monaco:h13
    set antialias

Vous pouvez bien s√ªr changer le `h13` par `h12` si vous voulez une police plus petite (ou par `h14` si vous en voulez une plus grande).

Sinon sous Linux j'utilise la police `DejaVu Sans Mono` que je trouve plut√¥t sympathique¬†: ::

    set guifont=DejaVu\ Sans\ Mono\ 10
    set antialias

Vous pouvez l√† aussi bien s√ªr changer la taille de la police si vous le souhaitez. Pour avoir la liste des polices disponibles tapez en mode normal ``:set guifont:*``.

Vous trouverez une version compl√®te du fichier de configuration pour ce chapitre en ligne http://vimebook.com/link/v2/fr/syntaxhlconfig. Je ne m'attarderai pas plus sur les polices, c'est assez d√©pendant de votre syst√®me d'exploitation, et un peu moins de |vim|.


L'explorateur de fichiers : notre premier plugin
================================================

Nous y voil√†, nous avons un |vim| √† peu pr√®s utilisable avec de jolies couleurs. Maintenant, il faudrait √™tre capable d'ouvrir des fichiers, √ßa pourrait √™tre pratique¬†! √áa va √™tre une bonne occasion pour installer notre premier plugin. Nous allons proc√©der ici en deux √©tapes, tout d'abord installer un gestionnaire de plugins pour √©viter que √ßa devienne trop le bazar dans vos plugins, puis installer le plugin ad√©quat pour explorer un r√©pertoire de fichiers.

Gestionnaire de plugins: vim-plug
---------------------------------

`vim-plug <https://github.com/junegunn/vim-plug>`_ est le genre de plugin typique que vous d√©couvrez apr√®s avoir commenc√© √† configurer votre |vim| et qui g√©n√®re ce type de r√©action : ¬´¬†*Ah si j'avais su j'aurais directement commenc√© avec*¬†¬ª. √áa tombe bien, c'est ce que nous allons faire.

Tout d'abord, petite explication sur la mani√®re d'installer et de configurer des plugins dans |vim|. Ils s'installent en copiant les fichiers ad√©quats (la plupart du temps avec une extension en *\*.vim*) dans des sous-r√©pertoires de votre r√©pertoire de configuration *.vim*. On a d√©j√† d'ailleurs commenc√© √† y cr√©er un sous-r√©pertoire `colors` qui contient notre "plugin" de coloration `solarized`.

Le probl√®me avec cette approche c'est que les diff√©rents plugins ne sont pas isol√©s (vous allez devoir copier leurs fichiers dans les diff√©rents sous-r√©pertoires) et que vous allez donc vous retrouver avec des fichiers un peu partout sans savoir √† qui ils appartiennent. Autant vous dire qu'une fois que vous voulez d√©sinstaller ou mettre √† jour un plugin, c'est vite l'enfer pour savoir quels sont ses fichiers.

C'est l√† que *vim-plug* arrive √† la rescousse, il va vous permettre d'installer chaque plugin dans un sous-r√©pertoire rien que pour lui. Voici ce que donnerait le r√©pertoire `.vim` d'une installation fictive de |vim| avant et apr√®s l'utilisation de *vim-plug*. 


.. code-block:: bash
    :caption: .vim avant l'utilisation de *vim-plug*

    .vim-
    ‚îú‚îÄ‚îÄ autoload
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ phpcomplete.vim
    ‚îú‚îÄ‚îÄ colors
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ solarized.vim
    ‚îî‚îÄ‚îÄ syntax
        ‚îú‚îÄ‚îÄ php.vim
     ¬†¬† ‚îî‚îÄ‚îÄ sql.vim


.. code-block:: bash
    :caption: .vim apr√®s l'utilisation de *vim-plug*

    .vim
    ‚îú‚îÄ‚îÄ autoload
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ plug.vim
    ‚îî‚îÄ‚îÄ plugged
        ‚îú‚îÄ‚îÄ solarized
        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ colors
        ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ solarized.vim
        ‚îú‚îÄ‚îÄ php
        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ autoload
        ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ phpcomplete.vim
        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ syntax
        ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ php.vim
        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ autoload
     ¬†¬† ‚îî‚îÄ‚îÄ sql
         ¬†¬† ‚îî‚îÄ‚îÄ syntax
         ¬†¬†  ¬†¬† ‚îî‚îÄ‚îÄ sql.vim

Certes la version avec *vim-plug* contient plus de sous-r√©pertoires mais chaque plugin est isol√© dans son propre r√©pertoir. Croyez-moi sur parole, ce rangement va vous √©viter bien des ennuis par la suite.

Commen√ßons par installer *vim-plug*. Cr√©ez un r√©pertoire nomm√© `autoload` dans votre r√©pertoire `.vim` et copiez y `plug.vim` que vous pouvez t√©l√©charger ici : https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim. Pour les utilisateurs Unix, la commande qui suit permet de l'installer automatiquement¬†:

.. code-block:: bash

    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

Il nous faut maintenant activer *vim-plug* dans notre |vimrc| et le tour est jou√©. Nous placerons le code list√© ci-dessous au d√©but du fichier |vimrc|, directement apr√®s la ligne `set nocompatible`. Il est imp√©ratif de placer le code **au d√©but** de votre fichier |vimrc| au risque que tout ne fonctionne pas comme souhait√©. ::

    " Activation de vim-plug
    call plug#begin()

    " Nous mettrons nos plugins ici

    call plug#end()

Puisque charit√© bien ordonn√©e commence par soi-m√™me, nous allons utiliser `vim-plug` pour g√©rer **solarized** au lieu de l'installer √† la main comme nous l'avons fait pr√©c√©demment. Commen√ßons par supprimer le r√©pertoire ``colors`` que nous avons cr√©√© pr√©c√©demment o√π nous avions plac√© *solarized*¬†:

.. code-block:: bash

    # Suppression du r√©pertoire colors
    rm -rf ~/.vim/colors


Modifions ensuite notre fichier ``~/.vimrc`` pour y ajouter **solarized** comme plugin (|vim| devrait se plaindre qu'il ne peut pas trouver le th√®me *solarized*, vous pouvez ignorer l'erreur, nous allons justement l'installer). ::

    " Activation de vim-plug
    call plug#begin()

    " Nous mettrons nos plugins ici

    " Installation de solarized
    Plug 'ericbn/vim-solarized'

    call plug#end()

Sauvegardez et quittez en utilisant en mode normal ``:wq``. Relancez |vim| pluis, tapez ``:PlugInstall`` pour installer notre nouveau plugin (appuyez sur |ttq| pour quitter la fen√™tre d'installation). Au prochain chargement de |vim|, vous devriez avoir retrouv√© vos couleurs.


Voil√† notre |vim| est presque pr√™t pour le grand bain. Il vous reste une petite √©tape √† franchir : disposer d'un moyen pratique pour explorer les fichiers d'un projet. C'est ici que *The NERD Tree* entre en lice.

.. _secvimfern:

Explorateur de fichiers : vim-fern
----------------------------------

*vim-fern* est un plugin permettant d'afficher visuellement une arborescence de fichiers directement dans la partie gauche (par d√©faut) de votre |vim|, √† la *VSCode*, *Sublime Text* ou encore *Eclipse/NetBeans*. Ce plugin n'est pas essentiel si vous souhaitez tout contr√¥ler au clavier (je ne l'utilise plus moi-m√™me), mais est assez pratique lorsque l'on d√©bute avec |vim|.

@TODO: V√©rifier si on va toujours utiliser LustExplorer
L'alternative que nous verrons plus tard au chapitre :ref:`plugins` est d'utiliser un plugin comme *LeaderF* pour trouver des fichiers et les plugins *LustyExplorer* et *LustyJuggler* pour naviguer entre les fichiers. En effet, devoir visualiser l'arborescence pour trouver un fichier est toujours plus lent que de trouver le fichier √† partir de son nom par exemple. *vim-fern* vous permettra donc d'obtenir un |vim| se comportant comme un √©diteur classique avec un explorateur de fichiers sur lequel vous pourrez cliquer.

Nous allons tout d'abord installer *vim-fern* √† l'aide de *vim-plug* comme pr√©c√©demment puis activer l'utilisation de la souris dans le terminal. ::

    " Activation de vim-plug
    call plug#begin()

    " Nous mettrons nos plugins ici

    " Installation de solarized
    Plug 'ericbn/vim-solarized'

    " Installation de vim-fern
    Plug 'lambdalisue/fern.vim'

    call plug#end()


    " -- Activation de la souris
    set mouse=a

Rechargez votre `vimrc` avec la commande suivante :¬†``:source $MYVIMRC`` (ou sauvegardez, quittez et r√©ouvrez |vim| comme pr√©c√©demment) puis installez le nouveau plugin gr√¢ce √† ``:PlugInstall`` (appuyez sur |ttq| pour quitter la fen√™tre d'installation).


Il va ensuite falloir activer le plugin. Vous pouvez le faire manuellement en tapant ``:Fern . -drawer -stay`` en mode normal. Si vous pr√©f√©rez activer *vim-fern* √† chaque fois que vous ouvrez votre |vim|, ajoutez ces lignes √† la fin de votre |vimrc|: ::

    " Activation de vim-fern au lancement de vim
    augroup FernGroup
      autocmd! *
      autocmd VimEnter * ++nested Fern . -drawer -stay
    augroup END

C'est, j'en conviens, une commande un peu barbare qui pourrait se traduire en bon vieux fran√ßais par : √† chaque ouverture de vim (``VimEnter``), peu importe le type de fichier (``*``), lancer *Fern* dans le r√©pertoire courant ``.`` en mode ``drawer`` sur le c√¥t√© et en gardant ``stay`` le focus sur la fen√™tre actuelle (``Fern . -drawer -stay``).

Pour activer l'ouverture des r√©pertoires et des fichiers au clic de la souris, remplacez le code ci-dessus par : ::

    augroup FernGroup
      autocmd! *
      autocmd FileType fern call s:init_fern()

      autocmd VimEnter * ++nested Fern . -drawer -stay
    augroup END

    function! s:init_fern() abort
      nmap <buffer> <LeftRelease> <Plug>(fern-action-open-or-expand)
    endfunction

Rien de particulier ensuite, *vim-fern* vous affiche l'arborescence du r√©pertoire o√π vous avez lanc√© |vim|, comme vous le montre la capture d'√©cran ci-dessous. Vous pouvez utiliser la souris et/ou le clavier pour vous d√©placer. √Ä noter que |ttj| vous permet de descendre, |ttk| de remonter, |ttl| de d√©plier le contenu d'un r√©pertoire ou d'ouvrir le contenu d'un fichier et |tth| de le replier. √Ä noter qui si vous avez appuy√© sur |ttenter| sur un r√©pertoire, `vim-fern` ne vous affichera plus que le contenu de ce r√©pertoire, il vous suffit d'appuyer sur |ttreturn| pour retourner au r√©pertoire parent.

.. figure:: ../../book-tex/graphics/vim-fern.png

   |vim| avec *vim-fern* d'activ√©.

Vous pouvez aussi effectuer diverses commandes (cr√©er, copier des fichiers) mais nous ne rentrerons pas en d√©tail dans ces commandes ici. Vous pouvez toujours appuyer sur |ttquestion| dans la fen√™tre de `vim-fern` pour avoir un aper√ßu des commandes ou vous rendre sur le `site officiel de vim-fern <https://github.com/lambdalisue/vim-fern>`_.

Pour passer de la fen√™tre de *vim-fern* √† la fen√™tre d'√©dition de votre fichier au clavier, appuyez sur ``Ctrl + w`` puis ``w``. C'est √† dire la touche ``Control (Ctrl)`` et tout en la laissant appuy√©e la touche ``w``. Vous pouvez ensuite tout l√¢cher pour appuyer une nouvelle fois sur ``w``. Ce raccourci clavier sera d'ailleurs toujours valable pour naviguer entre vos diff√©rentes fen√™tres |vim| (il n'est pas sp√©cifique √† *vim-fern*).

Le fichier complet de votre |vimrc| √† ce stade est disponible √† cette adresse¬†: http://vimebook.com/link/v2/fr/vim-plug


Nous voil√† fin pr√™ts
====================

Voil√†, vous avez fait le plus dur. Enfin presque. Nous venons de couvrir ce qui manque cruellement √† |vim| : une configuration par d√©faut acceptable. Je ne dis pas que c'est la panac√©e pour l'instant, mais √ßa devrait vous permettre d'avoir un |vim| utilisable comme n'importe quel autre √©diteur de texte dont vous ne connaissez pas encore toutes les possibilit√©s. Je vous recommande √† ce stade de commencer √† l'utiliser dans votre vie quotidienne. N'h√©sitez pas √† user et √† abuser de la souris pour l'instant. Le but ici √©tant de r√©duire l'impact de l'utilisation de |vim| sur votre travail quotidien. Ce n'est pas encore le temps de briller en soci√©t√©. Vous apprendrez les raccourcis clavier au fur et √† mesure, et √ßa ne fait pas de vous un utilisateur de |vim| de seconde zone. Il faut bien commencer un jour.

Nous allons maintenant aborder ce qui fait l'unicit√© de |vim| : sa gestion des modes et des commandes pour manipuler le texte. La balle est dans votre camp maintenant : ou vous √™tes pr√™t √† changer vos habitudes et √† passer √† un autre niveau d'efficacit√©, ou alors n'utiliser |vim| que comme un bloc-notes am√©lior√© vous convient (dans ce cas l√†, vous pouvez vous arr√™ter l√†). C'est vous qui voyez !
