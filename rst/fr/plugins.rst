.. _plugins:

**************************
Les plugins indispensables
**************************

Soyons clair, |vim| sans ses plugins, c'est comme Milan sans R√©mo (¬© Fran√ßois Corbier - Sans ma barbe - https://www.bide-et-musique.com/song/149.html) : √ßa ne rime √† rien. C'est gr√¢ce aux plugins que |vim| va pouvoir pleinement exprimer toute sa puissance et vous √©lever √† un autre niveau de productivit√©. Vous n'avez pas besoin d'en avoir des mille et des cents, mais quelques-uns savamment choisis devraient faire l'affaire.

Qu'on ne se m√©prenne pas, |vim| peut bien s√ªr s'utiliser sans plugins. Il peut d'ailleurs s'av√©rer utile de savoir faire les manipulations de base sans avoir besoin d'installer de plugin, car c'est souvent le cas sur des serveurs : il n'y a aucun plugin d'install√©. Dans ce cas l√†, savoir ouvrir, sauvegarder sous, passer d'un fichier √† l'autre avec les commandes de |vim| par d√©faut peut vous sauver la mise. En revanche, dans votre travail quotidien de r√©daction ou de code, les plugins sont indispensables pour pleinement tirer partie de |vim|.

.. _seclusty:

Naviguer sur le disque et entre les fichiers : *Lusty Explorer*
===============================================================

Nous avons d√©j√† vu `vim-fern` dans :ref:`secvimfern` qui permettait d'avoir un explorateur de projet dans une fen√™tre lat√©rale de |vim|. Le probl√®me de ce plugin est qu'il n'est pas fait pour √™tre utilis√© au clavier. Certes vous pouvez utiliser le clavier, mais il ne sera pas aussi efficace que les plugins pens√©s uniquement pour une utilisation au clavier.

Personnellement, le premier plugin que j'installe partout o√π j'ai √† utiliser |vim|, c'est *Lusty Explorer* (http://www.vim.org/scripts/script.php?script_id=1890). Ce plugin va vous permettre de naviguer sur votre disque dur pour ouvrir facilement des fichiers en se passant de la souris. Il va aussi permettre de naviguer rapidement entre vos diff√©rents fichiers d√©j√† ouverts (vos buffers en jargon |vim|). Commen√ßons par l'installer via *vim-plug*. Comme d'habitude, ajoutez la ligne ci-dessous √† la suite des plugins d√©j√† list√©s dans votre |vimrc|¬†:


.. code-block::

    " Installation de Lusty Explorer
    Plug 'sjbach/lusty'

Reste maintenant √† voir comment l'utiliser. Si l'on se r√©f√®re √† la documentation, voil√† ce que l'on trouve (traduit en fran√ßais) :

.. code-block:: html

    <Leader>lf  - Ouvre l'explorateur de fichiers.
    <Leader>lr  - Ouvre l'explorateur de fichiers √† partir du r√©pertoire du fichier courant.
    <Leader>lb  - Ouvre l'explorateur de buffers.
    <Leader>lg  - Ouvre la recherche dans les buffers.

On voit qu'il est fait mention d'une touche nomm√©e |tleader| qu'il faut ensuite faire suivre d'autres touches comme *lf*, *lr*, *lb* et *lg*. Cette touche |tleader| est une touche sp√©ciale que l'on d√©finit dans son fichier |vimrc|. Elle sera √©norm√©ment utilis√©e par tous les plugins, beaucoup des commandes de ces derniers commenceront par la touche |tleader|. C'est un moyen d'√©viter les collisions avec les raccourcis par d√©faut de |vim|.

Il faut donc choisir une touche |tleader|. Par d√©faut, |vim| utilise ``\`` comme touche |tleader|. Sur nos claviers francophones c'est une tr√®s mauvaise id√©e d'utiliser cette touche car elle n'est pas pratique du tout. La plupart des utilisateurs de |vim| la remplace par la touche |tcomma|. Elle est directement accessible sous l'index de la main droite ce qui en fait une parfaite candidate. Pour sp√©cifier cela √† |vim| il va falloir rajouter une ligne dans votre fichier |vimrc|, √† savoir : ::

    " Utilisation de , comme touche <Leader>
    let mapleader = ","

Une fois la modification effectu√©e et prise en compte (en red√©marrant |vim| ou en tapant ``:so ~/.vimrc`` ou ``:so $MYVIMRC`` en mode normal), vous devriez √™tre en mesure de taper ``,lr`` et d'avoir le m√™me style de r√©sultat que sur la figure ci-dessous (notez l'affichage du contenu de votre dossier actuel en bas √† gauche).

.. _la capture d'√©cran de lusty: lusty_

.. _lusty:

.. image:: ../../book-tex/graphics/vim-lusty.png

Vous pouvez constater sur `la capture d'√©cran de lusty`_ qu'il y a deux parties √† *Lusty Explorer*. La partie basse vous indique le r√©pertoire que vous √™tes en train d'explorer et la partie haute liste le contenu de ce r√©pertoire. En surbrillance se trouve l'√©l√©ment couramment s√©lectionn√©. Dans le cas de `la capture d'√©cran de lusty`_ c'est le r√©pertoire ``.autoload/`` en jaune  (la couleur pourra √™tre diff√©rente en fonction de votre th√®me).

*Lusty Explorer* utilise une fonctionnalit√© de *Fuzzy matching* qui va vous permettre de ne taper qu'une partie d'un nom de fichier ou de r√©pertoire pour le s√©lectionner. Dans mon exemple, si, dans la fen√™tre de *Lusty*, je saisi ``pl`` il va me s√©lectionner le r√©pertoire ``plugged/`` sans que j'ai √† lui sp√©cifier le nom entier, je n'aurai ensuite plus qu'√† appuyer sur |ttenter| pour ouvrir le fichier dans |vim|. La figure suivante vous montre l'exemple en question.

.. _fuzzy:

.. image:: ../../book-tex/graphics/vim-lusty-fuzzy.png


*Lusty Explorer* dispose en plus de quelques raccourcis bien pratiques pour utiliser le navigateur de fichiers :

* |tctrl| + |tn| pour s√©lectionner le fichier/r√©pertoire suivant
* |tctrl| + |tp| pour s√©lectionner le fichier/r√©pertoire pr√©c√©dent
* |tctrl| + |tw| pour descendre au r√©pertoire parent
* |tctrl| + |te| cr√©e un nouveau fichier vide (non sauvegard√© sur le disque) avec le nom sp√©cifi√© actuellement dans *Lusty Explorer*. Vous n'aurez plus qu'√† utiliser ``:w`` pour √©crire le contenu du fichier sur le disque.

*Lusty Explorer* s'utilise donc pour deux choses : naviguer sur votre syst√®me de fichiers avec ``,lr`` et ``,lf``, et naviguer entre vos fichiers ouverts (buffers) avec ``,lb``. Personnellement j'utilise moins la recherche dans les buffers avec ``,lg``, √† vous de tester et de vous faire votre propre opinion.

Je vous conseille en guise de test d'ouvrir plusieurs fichiers avec ``,lr`` ou ``,lf``. Ensuite, entra√Ænez-vous √† naviguer entre ces diff√©rents fichiers ouverts en m√™me temps √† l'aide de ``,lb``. C'est une des combinaisons que j'utilise le plus au quotidien.

Ce plugin est indispensable et ajoute √† lui seul √©norm√©ment de valeur √† |vim| : se passer de la souris pour ouvrir des fichiers. Prenez donc le temps n√©cessaire pour l'apprendre correctement, c'est un investissement qui vaut le coup.

Recherche de fichiers, de cha√Ænes de caract√®res et d'un peu tout : *fzf*
========================================================================

Dans le monde informatique il existe un moyen tr√®s efficace pour rechercher des choses dont on conna√Æt ¬´¬†√†-peu-pr√®s¬†¬ª le nom, on appelle √ßa le **Fuzzy Matching** (*recherche approximative* ou *recherche floue* en fran√ßais, cf https://fr.wikipedia.org/wiki/Recherche_approximative). Cette technique va nous permettre de trouver des fichiers dont on conna√Æt une partie du nom, ou alors une partie du r√©pertoire parent et une partie du nom par exemple. Elle va aussi nous permettre de faire la m√™me chose pour le contenu des fichiers¬†: pas besoin d'√™tre tr√®s pr√©cis (majuscules, minuscules, accents, etc.) le **Fuzzy Matching** nous retournera ce qui se rapproche le plus du terme que l'on recherche.

`fzf <https://github.com/junegunn/fzf>`_ est la r√©f√©rence dans le domaine¬†: il permet de faire du **Fuzzy Matching** un peu partout et notamment avec vim¬†(√ßa tombe bien hein ü§ì)¬†!

Installation de *fzf*
---------------------

Ajoutez ces deux lignes √† vos plugins dans votre |vimrc| pour installer *fzf* et le plugin |vim| correspondant¬†: ::

    " Installation de fzf
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'

Puis ajoutez ces mappings plus bas dans votre fichier (n'importe o√π apr√®s le ``call plug#end()``)¬†: ::

    " -- Mappings FZF
    " On recherche dans les fichiers du r√©pertoire courant
    nmap <silent> <Leader>ff :Files<CR>
    " On recherche dans les buffers ouverts
    nmap <silent> <Leader>fb :Buffers<CR>
    " On recherche dans le contenu des fichiers
    nmap <silent> <Leader>fr :Rg<CR>

Comme d'habitude, pour prendre en compte ces modifications, tapez ``:so ~/.vimrc`` ou ``:so $MYVIMRC`` en mode normal puis ``:PlugInstall`` pour installer les deux plugins.

Recherche de fichiers par nom
-----------------------------

Tapez ``,ff`` en mode normal (ou ``:Files``) et vous devriez voir une fen√™tre similaire √† la capture d'√©cran suivante s'ouvrir¬†: fzf-files_

.. _fzf-files:

.. image:: ../../book-tex/graphics/vim-fzf-files.png

En fonction d'o√π vous avez ouvert votre |vim|, les r√©sultats seront bien s√ªr diff√©rents. Je l'ai pour ma part ouvert dans le r√©pertoire ``.vim``. Vous pouvez noter que j'ai juste tap√© `REAmd` et qu'il a automatiquement trouv√© tous les fichiers nomm√©s `README.md`. Il a m√™me mis en surbrillance dans les noms de fichiers ce qui a permis de faire la correspondance, dans notre cas le `REA` au d√©but du nom du fichier puis le `md` dans l'extension du fichier.

Vous pouvez naviguer dans les r√©sultats de recherche avec les raccourcis |vim| par d√©faut, √† savoir ``Ctrl-k`` pour bouger la s√©lection d'une ligne au-dessus et ``Ctrl-j`` pour bouger la s√©lection d'une ligne en dessous. Il suffira ensuite d'appuyer sur |ttenter| pour ouvrir le fichier s√©lectionn√©. Vous noterez l'aper√ßu du fichier √† droite de la fen√™tre qui s'est ouverte. Vous pouvez naviguer dans cet aper√ßu gr√¢ce √† ``Shift-haut`` et ``Shift-bas`` (eh oui, pas de raccourci |vim| pour cette fonction !)

Recherche de cha√Ænes de caract√®res dans les fichiers
----------------------------------------------------

Pour rechercher dans les fichiers nous allons utiliser un outil nomm√© `rg` (pour `ripgrep`). Assurez-vous donc de l'avoir install√©, les instructions sont disponibles sur le `github de rg <https://github.com/BurntSushi/ripgrep#installation>`_. Si vous ne connaissez pas `ripgrep`, il est grand temps de remplacer votre traditionnel `grep` par `rg`¬†: il est beaucoup plus performant et globalement bien mieux fichu.

Une fois `rg` install√©, tapez ``,fr`` en mode normal (ou ``:Rg``) et vous devriez voir une fen√™tre similaire √† :ref:`la capture d'√©cran suivante<fzf-rg>` s'ouvrir¬†:

.. _fzf-rg:

.. image:: ../../book-tex/graphics/vim-fzf-rg.png

Dans mon exemple, *fzf* a trouv√© le texte *config* au sein du fichier ``README-VIM.md`` dans le titre ``### Configuration``.

Recherche dans les noms de buffers
----------------------------------

Tapez ``,fb`` en mode normal (ou ``:Buffers``) et vous devriez voir une fen√™tre similaire √† :ref:`la capture d'√©cran suivante<fzf-buffers>` s'ouvrir¬†:


.. _fzf-buffers:

.. image:: ../../book-tex/graphics/vim-fzf-buffers.png


Vous noterez que j'avais pour ma part 3 fichiers (buffers) ouverts et vous aurez remarqu√© que cette fonctionnalit√© est similaire √† celle d√©j√† pr√©sente dans `LustyExplorer`. √Ä vous de choisir celle que vous pr√©f√©rez¬†!

Vous trouverez une version compl√®te du fichier de configuration en ligne ici http://vimebook.com/link/v2/fr/full.

Les plugins avanc√©s
===================

J'aurais pu faire un livre entier qui recense les plugins |vim|, mais je pense que l'int√©r√™t aurait √©t√© assez limit√©. Je ne vais donc pas vous d√©crire plus en d√©tails d'autres plugins, ceux que je vous ai pr√©sent√©s jusqu'ici devraient vous suffir pour utiliser |vim| de mani√®re efficace¬†! En revanche je vous donne ci-dessous une liste de plugins qui pourraient vous int√©resser. Cette liste est issue d'un sondage que j'avais effectu√© sur Twitter demandant √† mes followers quels √©taient les plugins |vim| indispensables selon eux. La voici :



* **coc.vim**. C'est un plugin qui va transformer votre |vim| en IDE complet √† la VSCode¬†: auto-compl√©tion des fonctions, des classes, ¬´¬†allez √† la d√©finition¬†¬ª, etc. M√™me si la tendance est √† utiliser des `plugins plus simples qui s'int√®grent avec des LSP (Language Server Protocol) directement <https://github.com/prabirshrestha/vim-lsp>`_, *coc.vim* a l'avantage d'√™tre complet, test√© et de s'appuyer sur les configurations similaires √† VSCode. Il a aussi le d√©savantage d'utiliser javascript. Le repo Github : https://github.com/neoclide/coc.nvim.
* **surround**. Ce plugin permet de g√©rer (changer, ajouter, supprimer) tout ce qui ¬´¬†entoure¬†¬ª : les parenth√®ses, les crochets, les guillemets ‚Ä¶ Par exemple vous pourrez en une combinaison de touches changer "Hello world!" en 'Hello world!' ou <q>Hello world!</q>. Le repo Github : https://github.com/tpope/vim-surround.
* **fugitive**. Si vous travaillez sur du code source vous utilisez forc√©ment un gestionnaire de version de code source. Si ce n'est pas le cas vous pouvez aller vous cacher. Sinon si vous utilisez Git, Le plugin fugitive est pour vous. Il permet de g√©rer Git directement dans |vim|. Le repo Github :  https://github.com/tpope/vim-fugitive
* **ALE**. ALE v√©rifie pour vous la syntaxe de votre code source. Il va, comme peut le faire VSCode par exemple, vous afficher vos erreurs de syntaxe directement dans |vim|. Peut vous faire gagner un temps certain si vous √©ditez souvent du code. Si vous voulez l'utiliser avec *coc.vim*, assurez-vous de mettre ``"diagnostic.displayByAle": true`` dans votre ``:CocConfig`` `comme mentionn√© dans le d√©p√¥t Github <https://github.com/dense-analysis/ale?tab=readme-ov-file#cocnvim>`_ de ALE. Le repo Github est par ici : https://github.com/dense-analysis/ale

